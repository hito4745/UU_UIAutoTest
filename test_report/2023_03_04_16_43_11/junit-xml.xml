<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="11" time="177.362" timestamp="2023-03-04T16:43:12.426637" hostname="111deMacBook-Pro.local"><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_001" time="8.533" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_002" time="3.787" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_003" time="1.065" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_004[case1]" time="2.850" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_004[case2]" time="2.696" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_004[case3]" time="2.547" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_006[1-Selenium]" time="2.607" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_006[2-playwright]" time="3.873" /><testcase classname="test_case.test_inventory.TestInventory" name="test_grounding_onleysale" time="72.656"><failure message="playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.&#10;=========================== logs ===========================&#10;waiting for locator(&quot;text=上架成功&quot;)&#10;============================================================">self = &lt;test_case.test_inventory.TestInventory object at 0x111668880&gt;
page = &lt;Page url='https://testwww.youpin898.com/stock?gameId=730&amp;tabKey=1'&gt;

    @allure.story("只卖不租-单个上架")
    def test_grounding_onleysale(self, page):
        # 点击我的库存
        page.locator(InventoryPage.my_inventory).click()
        # 库存加载较慢，设置一个等待时间
        page.wait_for_timeout(10000)
        page.locator(InventoryPage.show_all).click()
        # 点击可出售筛选项
        page.locator(InventoryPage.show_can_sale).click()
        page.wait_for_timeout(5000)
        # 选择商品
        page.locator(InventoryPage.select_goods).click()
        page.wait_for_timeout(5000)
        # 点击上架
        page.locator(InventoryPage.grounding_but).click()
        page.wait_for_timeout(5000)
        # 点击只卖不租
        page.locator(InventoryPage.only_sale).click()
        # 输入价格
        page.locator(InventoryPage.pricing_sale).fill("1")
        # 输入商品描述
        page.locator(InventoryPage.add_comment).fill("UI自动化上架demo正确上架数字1")
        page.wait_for_timeout(1000)
        # 点击确认上架
        page.locator(InventoryPage.confirm_grounding_but).click()
        page.wait_for_timeout(5000)
        # 点击确认，因确认框隐藏无法捕获，此处使用JS点击
        # page.evaluate(InventoryPage.confirm)
        # 对话框处理 监听对话框
        # page.on("dialog", lambda dialog: dialog.accept())
    
        page.click(InventoryPage.confirm)
    
        page.wait_for_timeout(5000)
        # 获取弹窗文字
&gt;       msg = page.locator(InventoryPage.msg).text_content()

test_case/test_inventory.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/playwright/sync_api/_generated.py:17504: in text_content
    self._sync(self._impl_obj.text_content(timeout=timeout))
venv/lib/python3.10/site-packages/playwright/_impl/_locator.py:552: in text_content
    return await self._frame.text_content(
venv/lib/python3.10/site-packages/playwright/_impl/_frame.py:605: in text_content
    return await self._channel.send("textContent", locals_to_params(locals()))
venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:44: in send
    return await self._connection.wrap_api_call(
venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:419: in wrap_api_call
    return await cb()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;playwright._impl._connection.Channel object at 0x111a41060&gt;
method = 'textContent', params = {'selector': 'text=上架成功', 'strict': True}
return_as_dict = False

    async def inner_send(
        self, method: str, params: Optional[Dict], return_as_dict: bool
    ) -&gt; Any:
        if params is None:
            params = {}
        callback = self._connection._send_message_to_server(self._guid, method, params)
        if self._connection._error:
            error = self._connection._error
            self._connection._error = None
            raise error
        done, _ = await asyncio.wait(
            {
                self._connection._transport.on_error_future,
                callback.future,
            },
            return_when=asyncio.FIRST_COMPLETED,
        )
        if not callback.future.done():
            callback.future.cancel()
&gt;       result = next(iter(done)).result()
E       playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.
E       =========================== logs ===========================
E       waiting for locator("text=上架成功")
E       ============================================================

venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:79: TimeoutError</failure></testcase><testcase classname="test_case.test_inventory.TestInventory" name="test_grounding" time="68.404"><failure message="playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.&#10;=========================== logs ===========================&#10;waiting for locator(&quot;text=上架成功&quot;)&#10;============================================================">self = &lt;test_case.test_inventory.TestInventory object at 0x111668b50&gt;
page = &lt;Page url='https://testwww.youpin898.com/stock?gameId=730&amp;tabKey=1'&gt;

    @allure.story("可租可买-单个上架")
    # 点击我的库存
    def test_grounding(self, page):
        # page.locator(InventoryPage.my_inventory).click()
        # 库存加载较慢，设置一个等待时间
        page.wait_for_timeout(10000)
        # 点击可出售筛选项
        # page.locator(InventoryPage.show_can_sale).click()
        # page.wait_for_timeout(5000)
        # 选择商品
        page.locator(InventoryPage.select_goods).click()
        page.wait_for_timeout(5000)
        # 点击上架
        page.locator(InventoryPage.grounding_but).click()
        page.wait_for_timeout(5000)
        # 点击只卖不租
        # 输入价格
        page.locator(InventoryPage.pricing_sale).fill("2")
        # 输入商品描述
        page.locator(InventoryPage.add_comment).fill("UI自动化上架demo")
        page.wait_for_timeout(1000)
        page.locator(InventoryPage.max_day).fill("8")
        page.wait_for_timeout(1000)
        page.locator(InventoryPage.short_rental).fill("0.01")
        page.wait_for_timeout(1000)
        page.locator(InventoryPage.antecedent_money).fill("2")
        # 点击确认上架
        page.locator(InventoryPage.confirm_grounding_but).click()
        page.wait_for_timeout(5000)
        # 点击确认，因确认框隐藏无法捕获，此处使用JS点击
        # page.evaluate(InventoryPage.confirm)
        # 对话框处理 监听对话框
        # page.on("dialog", lambda dialog: dialog.accept())
    
        page.click(InventoryPage.confirm)
    
        page.wait_for_timeout(5000)
        # 获取弹窗文字
&gt;       msg = page.locator(InventoryPage.msg).text_content()

test_case/test_inventory.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/playwright/sync_api/_generated.py:17504: in text_content
    self._sync(self._impl_obj.text_content(timeout=timeout))
venv/lib/python3.10/site-packages/playwright/_impl/_locator.py:552: in text_content
    return await self._frame.text_content(
venv/lib/python3.10/site-packages/playwright/_impl/_frame.py:605: in text_content
    return await self._channel.send("textContent", locals_to_params(locals()))
venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:44: in send
    return await self._connection.wrap_api_call(
venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:419: in wrap_api_call
    return await cb()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;playwright._impl._connection.Channel object at 0x111a41060&gt;
method = 'textContent', params = {'selector': 'text=上架成功', 'strict': True}
return_as_dict = False

    async def inner_send(
        self, method: str, params: Optional[Dict], return_as_dict: bool
    ) -&gt; Any:
        if params is None:
            params = {}
        callback = self._connection._send_message_to_server(self._guid, method, params)
        if self._connection._error:
            error = self._connection._error
            self._connection._error = None
            raise error
        done, _ = await asyncio.wait(
            {
                self._connection._transport.on_error_future,
                callback.future,
            },
            return_when=asyncio.FIRST_COMPLETED,
        )
        if not callback.future.done():
            callback.future.cancel()
&gt;       result = next(iter(done)).result()
E       playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.
E       =========================== logs ===========================
E       waiting for locator("text=上架成功")
E       ============================================================

venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:79: TimeoutError</failure></testcase><testcase classname="test_case.test_login.TestLogin" name="test_login_001[15557993305-888888]" time="7.251" /></testsuite></testsuites>