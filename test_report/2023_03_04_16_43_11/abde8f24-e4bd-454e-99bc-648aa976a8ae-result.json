{"name": "test_grounding_onleysale", "status": "broken", "statusDetails": {"message": "playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for locator(\"text=上架成功\")\n============================================================", "trace": "self = <test_case.test_inventory.TestInventory object at 0x111668880>\npage = <Page url='https://testwww.youpin898.com/stock?gameId=730&tabKey=1'>\n\n    @allure.story(\"只卖不租-单个上架\")\n    def test_grounding_onleysale(self, page):\n        # 点击我的库存\n        page.locator(InventoryPage.my_inventory).click()\n        # 库存加载较慢，设置一个等待时间\n        page.wait_for_timeout(10000)\n        page.locator(InventoryPage.show_all).click()\n        # 点击可出售筛选项\n        page.locator(InventoryPage.show_can_sale).click()\n        page.wait_for_timeout(5000)\n        # 选择商品\n        page.locator(InventoryPage.select_goods).click()\n        page.wait_for_timeout(5000)\n        # 点击上架\n        page.locator(InventoryPage.grounding_but).click()\n        page.wait_for_timeout(5000)\n        # 点击只卖不租\n        page.locator(InventoryPage.only_sale).click()\n        # 输入价格\n        page.locator(InventoryPage.pricing_sale).fill(\"1\")\n        # 输入商品描述\n        page.locator(InventoryPage.add_comment).fill(\"UI自动化上架demo正确上架数字1\")\n        page.wait_for_timeout(1000)\n        # 点击确认上架\n        page.locator(InventoryPage.confirm_grounding_but).click()\n        page.wait_for_timeout(5000)\n        # 点击确认，因确认框隐藏无法捕获，此处使用JS点击\n        # page.evaluate(InventoryPage.confirm)\n        # 对话框处理 监听对话框\n        # page.on(\"dialog\", lambda dialog: dialog.accept())\n    \n        page.click(InventoryPage.confirm)\n    \n        page.wait_for_timeout(5000)\n        # 获取弹窗文字\n>       msg = page.locator(InventoryPage.msg).text_content()\n\ntest_case/test_inventory.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/playwright/sync_api/_generated.py:17504: in text_content\n    self._sync(self._impl_obj.text_content(timeout=timeout))\nvenv/lib/python3.10/site-packages/playwright/_impl/_locator.py:552: in text_content\n    return await self._frame.text_content(\nvenv/lib/python3.10/site-packages/playwright/_impl/_frame.py:605: in text_content\n    return await self._channel.send(\"textContent\", locals_to_params(locals()))\nvenv/lib/python3.10/site-packages/playwright/_impl/_connection.py:44: in send\n    return await self._connection.wrap_api_call(\nvenv/lib/python3.10/site-packages/playwright/_impl/_connection.py:419: in wrap_api_call\n    return await cb()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x111a41060>\nmethod = 'textContent', params = {'selector': 'text=上架成功', 'strict': True}\nreturn_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\nE       =========================== logs ===========================\nE       waiting for locator(\"text=上架成功\")\nE       ============================================================\n\nvenv/lib/python3.10/site-packages/playwright/_impl/_connection.py:79: TimeoutError"}, "attachments": [{"name": "test-case-test-inventory-py-testinventory-test-grounding-onleysale.png", "source": "c17af05f-f812-4181-8a61-54a860d7219b-attachment.png", "type": "image/png"}, {"name": "log", "source": "380c45dd-1fc6-40eb-93ae-4756cb3c4024-attachment.txt", "type": "text/plain"}], "start": 1677919425772, "stop": 1677919493561, "uuid": "060b8388-5b8e-4a0b-86fd-a685df21dfc0", "historyId": "254710fa0b36828267a23df7f3f6e680", "testCaseId": "9a7f6d2b230710cac8e64d5236d9fa14", "fullName": "test_case.test_inventory.TestInventory#test_grounding_onleysale", "labels": [{"name": "feature", "value": "库存页测试"}, {"name": "story", "value": "只卖不租-单个上架"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_inventory"}, {"name": "subSuite", "value": "TestInventory"}, {"name": "host", "value": "111deMacBook-Pro.local"}, {"name": "thread", "value": "32797-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_inventory"}]}