<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="11" time="157.596" timestamp="2023-03-03T17:52:40.884551" hostname="111deMacBook-Pro.local"><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_001" time="8.413" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_002" time="3.029" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_003" time="1.148" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_004[case1]" time="3.156" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_004[case2]" time="2.577" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_004[case3]" time="3.093" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_006[1-Selenium]" time="2.683" /><testcase classname="test_case.test_baidu.TestBaidu" name="test_baidu_006[2-playwright]" time="4.090" /><testcase classname="test_case.test_inventory.TestInventory" name="test_grounding_onleysale" time="30.910"><failure message="playwright._impl._api_types.Error: value: expected string, got number">self = &lt;test_case.test_inventory.TestInventory object at 0x111398400&gt;
page = &lt;Page url='https://testwww.youpin898.com/stock?gameId=730&amp;tabKey=1'&gt;

    @allure.story("只卖不租-单个上架")
    def test_grounding_onleysale(self, page):
        # 点击我的库存
        page.locator(InventoryPage.my_inventory).click()
        # 库存加载较慢，设置一个等待时间
        page.wait_for_timeout(10000)
        page.locator(InventoryPage.show_all).click()
        # 点击可出售筛选项
        page.locator(InventoryPage.show_can_sale).click()
        page.wait_for_timeout(5000)
        # 选择商品
        page.locator(InventoryPage.select_goods).click()
        page.wait_for_timeout(5000)
        # 点击上架
        page.locator(InventoryPage.grounding_but).click()
        page.wait_for_timeout(5000)
        # 点击只卖不租
        page.locator(InventoryPage.only_sale).click()
        # 输入价格
&gt;       page.locator(InventoryPage.pricing_sale).fill(1)

test_case/test_inventory.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/playwright/sync_api/_generated.py:15755: in fill
    self._sync(
venv/lib/python3.10/site-packages/playwright/_impl/_locator.py:198: in fill
    return await self._frame.fill(self._selector, strict=True, **params)
venv/lib/python3.10/site-packages/playwright/_impl/_frame.py:528: in fill
    await self._channel.send("fill", locals_to_params(locals()))
venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:44: in send
    return await self._connection.wrap_api_call(
venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:419: in wrap_api_call
    return await cb()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;playwright._impl._connection.Channel object at 0x1117753f0&gt;
method = 'fill'
params = {'selector': 'xpath=//html/body/div[5]/div/div[2]/div/div[2]/div/div/div[2]/div/div/div[2]/div[4]/input', 'strict': True, 'value': 1}
return_as_dict = False

    async def inner_send(
        self, method: str, params: Optional[Dict], return_as_dict: bool
    ) -&gt; Any:
        if params is None:
            params = {}
        callback = self._connection._send_message_to_server(self._guid, method, params)
        if self._connection._error:
            error = self._connection._error
            self._connection._error = None
            raise error
        done, _ = await asyncio.wait(
            {
                self._connection._transport.on_error_future,
                callback.future,
            },
            return_when=asyncio.FIRST_COMPLETED,
        )
        if not callback.future.done():
            callback.future.cancel()
&gt;       result = next(iter(done)).result()
E       playwright._impl._api_types.Error: value: expected string, got number

venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:79: Error</failure></testcase><testcase classname="test_case.test_inventory.TestInventory" name="test_grounding" time="66.262" /><testcase classname="test_case.test_login.TestLogin" name="test_login_001[15557993305-888888]" time="31.329"><failure message="playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.&#10;=========================== logs ===========================&#10;navigating to &quot;https://testwww.youpin898.com/&quot;, waiting until &quot;load&quot;&#10;============================================================">self = &lt;test_case.test_login.TestLogin object at 0x111398e80&gt;
login_page = &lt;Page url='about:blank'&gt;, phone = '15557993305', code = '888888'
base_url = 'https://testwww.youpin898.com/'

    @pytest.mark.parametrize(
        "phone, code",
        json_to_list(data_path + "/login_data.json")
    )
    @allure.story("test001-登录-成功")
    def test_login_001(self, login_page,phone,code, base_url):
        # 跳转有品首页
&gt;       login_page.goto(base_url)

test_case/test_login.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/playwright/sync_api/_generated.py:9210: in goto
    self._sync(
venv/lib/python3.10/site-packages/playwright/_impl/_page.py:494: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
venv/lib/python3.10/site-packages/playwright/_impl/_frame.py:147: in goto
    await self._channel.send("goto", locals_to_params(locals()))
venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:44: in send
    return await self._connection.wrap_api_call(
venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:419: in wrap_api_call
    return await cb()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;playwright._impl._connection.Channel object at 0x111a6e980&gt;
method = 'goto', params = {'url': 'https://testwww.youpin898.com/'}
return_as_dict = False

    async def inner_send(
        self, method: str, params: Optional[Dict], return_as_dict: bool
    ) -&gt; Any:
        if params is None:
            params = {}
        callback = self._connection._send_message_to_server(self._guid, method, params)
        if self._connection._error:
            error = self._connection._error
            self._connection._error = None
            raise error
        done, _ = await asyncio.wait(
            {
                self._connection._transport.on_error_future,
                callback.future,
            },
            return_when=asyncio.FIRST_COMPLETED,
        )
        if not callback.future.done():
            callback.future.cancel()
&gt;       result = next(iter(done)).result()
E       playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.
E       =========================== logs ===========================
E       navigating to "https://testwww.youpin898.com/", waiting until "load"
E       ============================================================

venv/lib/python3.10/site-packages/playwright/_impl/_connection.py:79: TimeoutError</failure></testcase></testsuite></testsuites>